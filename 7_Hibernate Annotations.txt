#Hibernate Annotations#

Hibernate Annotations is the powerful way to provide the metadata for the Object and Relational Table mapping. All the
metadata is clubbed into the POJO java file along with the code this helps the user to understand the table structure and POJO
simultaneously during the development.

If you going to make your application portable to other EJB 3 compliant ORM applications, you must use annotations to
representthe mapping information but still if you want greater flexibility then you should go with XML-based mappings.

Hibernate detects that the Id annotation is on a field and assumes that it should access properties on an object directly
through fields at runtime. If you placed the Id annotation on the getId() method, you would enable access to properties
through getter and setter methods by default. Hence, all other annotations are also placed on either fields or getter methods,
following the selected strategy. Following section will explain the annotations used in the above class.

$Entity Annotation$

The EJB 3 standard annotations are contained in the javax.persistence package, so we import this package as the first step.
Second we used the Entity annotation to the Employee class which marks this class as an entity bean, so it must have a 
no-argument constructor that is visible with at least protected scope.

$Table Annotation$

The Table annotation allows you to specify the details of the table that will be used to persist the entity in the database.

The Table annotation provides four attributes, allowing you to override the name of the table, its catalogue, and its schema,
and enforce unique constraints on columns in the table. For now we are using just table name which is EMPLOYEE.

$LD and GeneratedValue Annotations$

Each entity bean will have a primary key, which you annotate on the class with the Id annotation. The primary key can be a
single field or a combination of multiple fields depending on your table structure.

By default, the Id annotation will automatically determine the most appropriate primary key generation strategy to be used but
you can override this by applying the GeneratedValue annotation which takes two parameters strategy and generator which I'm
not going to discuss here, so let us use only default the default key generation strategy. Letting Hibernate determine which
generator type to use makes your code portable between different databases.
