#The Prototype Pattern#

The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is
determined by a prototypical instance, which is cloned to produce new objects. This pattern is used to:

• Co-opt one instance of a class for use as a breeder of all future instances
• Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype
• The new operator considered harmful

Declare an abstract base class that specifies a pure virtual "clone" method, and, maintains a dictionary of all "cloneable"
concrete derived classes. Any class that needs a "polymorphic constructor" capability: derives itself from the abstract base
class, registers its prototypical instance, and implements the clone() operation.

The client then, instead of writing code that invokes the "new" operator on a hard-wired class name, calls a "clone" operation
on the abstract base class, supplying a string or enumerated data type that designates the particular concrete derived class
desired.

